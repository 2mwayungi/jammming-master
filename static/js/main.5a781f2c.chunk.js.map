{"version":3,"sources":["Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/Playlist/Playlist.js","Components/SearchResult/SearchResult.js","util/Spotify.js","Components/App/App.js","index.js"],"names":["SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","term","search","bind","assertThisInitialized","handleTermChange","onSearch","event","setState","target","value","react_default","a","createElement","className","id","placeholder","onChange","onKeyDown","keyCode","document","getElementById","click","onClick","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","Components_Track_Track","key","Playlist","handleNameChange","onNameChange","defaultValue","Components_TrackList_TrackList","playlistTracks","onSave","SearchResult","searchResults","accessToken","Spotify","getAccessToken","access_token","window","location","href","match","expires_in","expiresIn","setTimeout","history","pushState","url","encodeURIComponent","searchTerm","fetch","concat","headers","Authorization","then","response","ok","json","Error","networkError","console","log","message","jsonResponse","items","artists","uri","savePlaylist","playlistName","trackURIs","userID","playlistID","method","body","JSON","stringify","description","uris","App","searchReults","updatePlaylistName","find","savedTrack","push","filter","e","_this2","_this3","Components_SearchBar_SearchBar","Components_SearchResult_SearchResult","Components_Playlist_Playlist","ReactDOM","render","Components_App_App"],"mappings":"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","file":"static/js/main.5a781f2c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      term: ''\n    }\n    this.search = this.search.bind(this);\n    this.handleTermChange = this.handleTermChange.bind(this);\n  }\n\n  search(){\n    this.props.onSearch(this.state.term);\n  }\n\n  // Listen to user's search input\n  handleTermChange(event){\n    this.setState({term: event.target.value});\n  }\n\n\n  render() {\n    return (\n      <div className=\"SearchBar\">\n        <input id=\"txtSearch\" placeholder=\"Enter A Song, Album, or Artist\"\n               onChange={this.handleTermChange} onKeyDown={(event)=>{\n                 if (event.keyCode === 13){\n                   document.getElementById('btnSearch').click();\n                 }\n               }}/>\n        <a id=\"btnSearch\" onClick={this.search}>SEARCH</a>\n      </div>\n    );\n  }\n}\n\nexport default SearchBar;","import React, { Component } from 'react';\nimport './Track.css';\n\nclass Track extends Component {\n\n  constructor(props){\n    super(props);\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n\n\n  }\n\n  renderAction() {\n    if(this.props.isRemoval){\n      return <a onClick={this.removeTrack}>-</a> ;\n    }\n    else{\n      return <a onClick={this.addTrack}>+</a>;\n    }\n  }\n\n  addTrack(){\n    this.props.onAdd(this.props.track);\n  }\n\n  removeTrack(){\n    this.props.onRemove(this.props.track);\n  }\n\n  render() {\n    return (\n      <div className=\"Track\">\n        <div className=\"Track-information\">\n          <h3>{this.props.track.name}</h3>\n          <p>{this.props.track.artist} | {this.props.track.album}</p>\n        </div>\n        <div className=\"Track-action\">\n          {this.renderAction()}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Track;","import React, { Component } from 'react';\nimport './TrackList.css';\nimport Track from '../Track/Track';\n\nclass TrackList extends Component {\n  render() {\n    return (\n      <div className=\"TrackList\">\n        // Renders a set of Track components\n        {\n          this.props.tracks.map(track => {\n            return <Track track={track} key={track.id} onAdd={this.props.onAdd} onRemove={this.props.onRemove} isRemoval={this.props.isRemoval} />;\n          })\n        }\n      </div>\n    );\n  }\n}\n\nexport default TrackList;","import React, { Component } from 'react';\nimport './Playlist.css';\nimport TrackList from '../TrackList/TrackList';\n\nclass Playlist extends Component {\n\n  constructor(props){\n    super(props);\n    this.handleNameChange = this.handleNameChange.bind(this);\n\n  }\n\n  handleNameChange(event){\n    this.props.onNameChange(event.target.value);\n  }\n\n  render() {\n    return (\n      <div className=\"Playlist\">\n        <input defaultValue={\"New Playlist\"} onChange={this.handleNameChange} />\n        <TrackList tracks={this.props.playlistTracks} onRemove={this.props.onRemove} isRemoval={true} />\n        <a className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</a>\n      </div>\n    );\n  }\n}\n\nexport default Playlist;","import React, { Component } from 'react';\nimport './SearchResult.css';\nimport TrackList from '../TrackList/TrackList';\n\nclass SearchResult extends Component {\n  render() {\n    return (\n      <div className=\"SearchResults\">\n        <h2>Results</h2>\n        <TrackList tracks={this.props.searchResults} onAdd={this.props.onAdd} isRemoval={false} />\n      </div>\n    );\n  }\n}\n\nexport default SearchResult;","var accessToken = '';\nconst client_id = 'a8f7855c9433474d98895949a107d6c1';\nconst redirect_uri = \"http://localhost:3000/\";\n\n\nconst Spotify = {\n  /**\n  * Get a Spotify user's access token\n  * Using Implicit Grant Flow to authenticate against the Spotify Accounts.\n  *\n  * For more information, read\n  * https://beta.developer.spotify.com/documentation/general/guides/authorization-guide/\n  */\n  getAccessToken(){\n    if(accessToken !== ''){\n      return accessToken;\n    }\n\n    var access_token = window.location.href.match(/access_token=([^&]*)/);\n    var expires_in = window.location.href.match(/expires_in=([^&]*)/);\n\n    if(access_token && expires_in){\n      accessToken = access_token[1];\n      var expiresIn = expires_in[1];\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    }\n    else{\n      var scope = 'playlist-modify-public';\n      var url = 'https://accounts.spotify.com/authorize';\n      url += '?response_type=token';\n      url += '&client_id=' + encodeURIComponent(client_id);\n      url += '&scope=' + encodeURIComponent(scope);\n      url += '&redirect_uri=' + encodeURIComponent(redirect_uri);\n      window.location = url;\n    }\n  },\n\n  // Returns a promise that will eventually resolve to the list of tracks from the search\n  search(searchTerm){\n    var access_token = this.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${searchTerm}`,\n    {\n      headers: {Authorization: `Bearer ${access_token}`}\n    }).then(response => {\n      if(response.ok){\n        return response.json();\n      }\n      throw new Error('Request failed!');\n    }, networkError => console.log(networkError.message)\n    ).then(jsonResponse => {\n      return jsonResponse.tracks.items.map(track => (\n        {\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri\n        }\n      )\n      );\n    });\n  },\n\n  // Write the user's playlist to theor Spotify account\n  savePlaylist(playlistName, trackURIs){\n    if(!playlistName || !trackURIs){\n      return;\n    }\n    var access_token = this.getAccessToken();\n    var userID;\n    var playlistID;\n\n    // GET request that returns the user's Spotify username\n    return fetch(`https://api.spotify.com/v1/me`,\n      {\n        headers: {Authorization: `Bearer ${access_token}`}\n      }).then(response => {\n        if(response.ok){\n          return response.json();\n        }\n        throw new Error('Request failed!');\n      }, networkError => console.log(networkError.message)\n    ).then(jsonResponse => {\n      userID = jsonResponse.id;\n\n      // POST request that creates a new playlist in the user's account and returns a playlist ID\n      fetch(`https://api.spotify.com/v1/users/${userID}/playlists`,\n        {\n          method: 'POST',\n          headers: {\n            Authorization: `Bearer ${access_token}`,\n            //Content-Type: 'application/json'\n          },\n          body: JSON.stringify(\n            {\n              name: playlistName,\n              description: \"New playlist description\"\n            }\n          )\n        }).then(response => {\n          if (response.ok) {\n            return response.json();\n          }\n          throw new Error('Request failed!');\n        }, networkError => console.log(networkError.message)\n      ).then(jsonResponse => {\n        playlistID = jsonResponse.id;\n\n        // POST request that adds tracks to a playlist\n        fetch(`https://api.spotify.com/v1/users/${userID}/playlists/${playlistID}/tracks`, {\n          method: 'POST',\n          headers: {\n            Authorization: `Bearer ${access_token}`,\n            //Content-Type: 'application/json'\n          },\n          body: JSON.stringify(\n            {\n              uris: trackURIs\n            }\n          )\n        }).then(response => {\n          if (response.ok) {\n            return response.json();\n          }\n          throw new Error('Request failed!');\n        }, networkError => console.log(networkError.message)\n      ).then(jsonResponse => {}\n      );\n      });\n    });\n  }\n\n};\n\n\nexport default Spotify;","import React, { Component } from 'react';\nimport SearchBar from '../SearchBar/SearchBar';\nimport Playlist from '../Playlist/Playlist';\nimport SearchResult from '../SearchResult/SearchResult';\nimport './App.css';\nimport Spotify from '../../util/Spotify';\n\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      searchReults: [],\n      playlistName: \"This is a playlistName\",\n      playlistTracks: []\n    };\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n\n  addTrack(track){\n    if(this.state.playlistTracks.find(savedTrack => savedTrack.id === track.id)){\n      return;\n    }\n    this.state.playlistTracks.push(track);\n    this.setState({playlistTracks: this.state.playlistTracks});\n  }\n\n  removeTrack(track){\n    this.setState({playlistTracks: this.state.playlistTracks.filter(e => e.id !== track.id)});\n  }\n\n\n  updatePlaylistName(name){\n    this.setState({playlistName: name});\n  }\n\n\n  savePlaylist(){\n    var trackURIs = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackURIs).then(() =>{\n      this.setState(\n        {\n          playlistName: 'New Playlist',\n          playlistTracks: []\n        }\n      )\n    });\n  }\n\n\n  search(term){\n    Spotify.search(term).then(tracks => {\n      this.setState({\n        searchReults: tracks\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search}/>\n          <div className=\"App-playlist\">\n          <SearchResult searchResults={this.state.searchReults} onAdd={this.addTrack}/>\n          <Playlist playlistName={this.state.playlistName}\n                    playlistTracks={this.state.playlistTracks}\n                    onRemove={this.removeTrack}\n                    onNameChange={this.updatePlaylistName}\n                    onSave={this.savePlaylist}\n                    />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}